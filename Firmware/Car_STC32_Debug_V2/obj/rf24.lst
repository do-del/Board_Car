C251 COMPILER V5.60.0,  rf24                                                               20/06/23  09:31:15  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE rf24
OBJECT MODULE PLACED IN .\obj\rf24.obj
COMPILER INVOKED BY: C:\Keil_c251\C251\BIN\C251.EXE Del\rf24.c XSMALL INTR2 BROWSE INCDIR(.\Del;.\src) DEBUG PRINT(.\obj
                    -\rf24.lst) TABS(2) OBJECT(.\obj\rf24.obj) 

stmt  level    source

    1          #include "rf24.h"
    2          
    3          unsigned char TX_ADDRESS[TX_ADR_WIDTH] = {0x0A,0x01,0x07,0x0E,0x01};  // ¶¨ÒåÒ»¸ö¾²Ì¬·¢ËÍµØÖ·
    4          
    5          /********************************************************
    6          º¯Êý¹¦ÄÜ£ºRF24Òý½Å³õÊ¼»¯                
    7          Èë¿Ú²ÎÊý£ºÎÞ
    8          ·µ»Ø  Öµ£ºÎÞ
    9          *********************************************************/
   10          void RF24_Init(void)
   11          {
   12   1        SCK_LOW();  //SCK = 0;                          //SPIÊ±ÖÓÏßÀ­µÍ
   13   1        CSN_HIGH(); //CSN = 1;
   14   1        CE_LOW(); //CE  = 0;
   15   1        //IRQ = 1;
   16   1      }
   17          
   18          
   19          /********************************************************
   20          º¯Êý¹¦ÄÜ£ºÐ´¼Ä´æÆ÷µÄÖµ£¨µ¥×Ö½Ú£©                
   21          Èë¿Ú²ÎÊý£ºreg:¼Ä´æÆ÷Ó³ÉäµØÖ·£¨¸ñÊ½£ºWRITE_REG£üreg£©
   22                    value:¼Ä´æÆ÷µÄÖµ
   23          ·µ»Ø  Öµ£º×´Ì¬¼Ä´æÆ÷µÄÖµ
   24          *********************************************************/
   25          unsigned char RF24_Write_Reg(unsigned char reg, unsigned char value)
   26          {
   27   1        unsigned char status;
   28   1      
   29   1        CSN_LOW();  //CSN = 0;                 
   30   1        status = SPI_RW(reg);       
   31   1        SPI_RW(value);
   32   1        CSN_HIGH(); //CSN = 1;  
   33   1        
   34   1        return(status);
   35   1      }
   36          
   37          
   38          /********************************************************
   39          º¯Êý¹¦ÄÜ£ºÐ´¼Ä´æÆ÷µÄÖµ£¨¶à×Ö½Ú£©                  
   40          Èë¿Ú²ÎÊý£ºreg:¼Ä´æÆ÷Ó³ÉäµØÖ·£¨¸ñÊ½£ºWRITE_REG£üreg£©
   41                    pBuf:Ð´Êý¾ÝÊ×µØÖ·
   42                    bytes:Ð´Êý¾Ý×Ö½ÚÊý
   43          ·µ»Ø  Öµ£º×´Ì¬¼Ä´æÆ÷µÄÖµ
   44          *********************************************************/
   45          unsigned char RF24_Write_Buf(unsigned char reg, const unsigned char *pBuf, unsigned char bytes)
   46          {
   47   1        unsigned char status,byte_ctr;
   48   1      
   49   1        CSN_LOW();  //CSN = 0;                                        
   50   1        status = SPI_RW(reg);                          
   51   1        for(byte_ctr=0; byte_ctr<bytes; byte_ctr++)     
   52   1          SPI_RW(*pBuf++);
   53   1        CSN_HIGH(); //CSN = 1;                                        
   54   1      
   55   1        return(status);       
   56   1      }                            
   57          
   58          
C251 COMPILER V5.60.0,  rf24                                                               20/06/23  09:31:15  PAGE 2   

   59          /********************************************************
   60          º¯Êý¹¦ÄÜ£º¶ÁÈ¡¼Ä´æÆ÷µÄÖµ£¨µ¥×Ö½Ú£©                  
   61          Èë¿Ú²ÎÊý£ºreg:¼Ä´æÆ÷Ó³ÉäµØÖ·£¨¸ñÊ½£ºREAD_REG£üreg£©
   62          ·µ»Ø  Öµ£º¼Ä´æÆ÷Öµ
   63          *********************************************************/
   64          unsigned char RF24_Read_Reg(unsigned char reg)
   65          {
   66   1        unsigned char value;
   67   1      
   68   1        CSN_LOW();  //CSN = 0;    
   69   1        SPI_RW(reg);      
   70   1        value = SPI_RW(0);
   71   1        CSN_HIGH(); //CSN = 1;              
   72   1      
   73   1        return(value);
   74   1      }
   75          
   76          
   77          /********************************************************
   78          º¯Êý¹¦ÄÜ£º¶ÁÈ¡¼Ä´æÆ÷µÄÖµ£¨¶à×Ö½Ú£©                  
   79          Èë¿Ú²ÎÊý£ºreg:¼Ä´æÆ÷Ó³ÉäµØÖ·£¨READ_REG£üreg£©
   80                    pBuf:½ÓÊÕ»º³åÇøµÄÊ×µØÖ·
   81                    bytes:¶ÁÈ¡×Ö½ÚÊý
   82          ·µ»Ø  Öµ£º×´Ì¬¼Ä´æÆ÷µÄÖµ
   83          *********************************************************/
   84          unsigned char RF24_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)
   85          {
   86   1        unsigned char status,byte_ctr;
   87   1      
   88   1        CSN_LOW();  //CSN = 0;                                        
   89   1        status = SPI_RW(reg);                           
   90   1        for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
   91   1          pBuf[byte_ctr] = SPI_RW(0);                   //¶ÁÈ¡Êý¾Ý£¬µÍ×Ö½ÚÔÚÇ°
   92   1        CSN_HIGH(); //CSN = 1;                                        
   93   1      
   94   1        return(status);    
   95   1      }
   96          
   97          
   98          /********************************************************
   99          º¯Êý¹¦ÄÜ£ºRF24½ÓÊÕÄ£Ê½³õÊ¼»¯                      
  100          Èë¿Ú²ÎÊý£ºÎÞ
  101          ·µ»Ø  Öµ£ºÎÞ
  102          *********************************************************/
  103          void RF24_RX_Mode(void)
  104          {
  105   1        CE_LOW(); //CE = 0;
  106   1        // RF24_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // ½ÓÊÕÉè±¸½ÓÊÕÍ¨µÀ0Ê¹ÓÃºÍ·¢ËÍÉè±¸Ï
             -àÍ¬µÄ·¢ËÍµØÖ·
  107   1        // RF24_Write_Reg(WRITE_REG + EN_AA, 0x01);                           // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
  108   1        // RF24_Write_Reg(WRITE_REG + EN_RXADDR, 0x01);                       // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
  109   1        // RF24_Write_Reg(WRITE_REG + RF_CH, 40);                             // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
  110   1        // RF24_Write_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH);              // ½ÓÊÕÍ¨µÀ0Ñ¡ÔñºÍ·¢ËÍÍ¨µÀÏàÍ¬ÓÐÐ§Êý¾Ý¿í
             -¶È
  111   1        // RF24_Write_Reg(WRITE_REG + RF_SETUP, 0x0f);                        // Êý¾Ý´«ÊäÂÊ2Mbps£¬·¢Éä¹¦ÂÊ7dBm
  112   1        RF24_Write_Reg(WRITE_REG + CONFIG, 0x0f);                         // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç£¬½ÓÊÕÄ£Ê½
  113   1        RF24_Write_Reg(WRITE_REG + STATUS, 0xff);                         //Çå³ýËùÓÐµÄÖÐ¶Ï±êÖ¾Î»
  114   1        CE_HIGH();  //CE = 1;                                                             // À­¸ßCEÆô¶¯½ÓÊÕÉè±¸
  115   1      }           
  116          
  117          
  118          /********************************************************
  119          º¯Êý¹¦ÄÜ£ºRF24·¢ËÍÄ£Ê½³õÊ¼»¯                      
  120          Èë¿Ú²ÎÊý£ºÎÞ
  121          ·µ»Ø  Öµ£ºÎÞ
  122          *********************************************************/
C251 COMPILER V5.60.0,  rf24                                                               20/06/23  09:31:15  PAGE 3   

  123          void RF24_TX_Mode(void)
  124          {
  125   1        CE_LOW(); //CE = 0;
  126   1        //RF24_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);     // Ð´Èë·¢ËÍµØÖ·
  127   1        //RF24_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // ÎªÁËÓ¦´ð½ÓÊÕÉè±¸£¬½ÓÊÕÍ¨µÀ0µØÖ·º
             -Í·¢ËÍµØÖ·ÏàÍ¬
  128   1      
  129   1        // RF24_Write_Reg(WRITE_REG + EN_AA, 0x01);                             // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
  130   1        // RF24_Write_Reg(WRITE_REG + EN_RXADDR, 0x01);                         // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
  131   1        // RF24_Write_Reg(WRITE_REG + SETUP_RETR, 0x0a);                        // ×Ô¶¯ÖØ·¢ÑÓÊ±µÈ´ý250us+86us£¬×Ô¶¯ÖØ·¢10´Î
  132   1        // RF24_Write_Reg(WRITE_REG + RF_CH, 40);                               // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
  133   1        // RF24_Write_Reg(WRITE_REG + RF_SETUP, 0x0f);                          // Êý¾Ý´«ÊäÂÊ2Mbps£¬·¢Éä¹¦ÂÊ7dBm
  134   1        RF24_Write_Reg(WRITE_REG + CONFIG, 0x0e);                           // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç
  135   1        RF24_Write_Reg(WRITE_REG + STATUS, 0xff);
  136   1        CE_HIGH();  //CE = 1;
  137   1      }
  138          
  139          
  140          /********************************************************
  141          º¯Êý¹¦ÄÜ£º¶ÁÈ¡½ÓÊÕÊý¾Ý                       
  142          Èë¿Ú²ÎÊý£ºrxbuf:½ÓÊÕÊý¾Ý´æ·ÅÊ×µØÖ·
  143          ·µ»Ø  Öµ£º0:½ÓÊÕµ½Êý¾Ý
  144                    1:Ã»ÓÐ½ÓÊÕµ½Êý¾Ý
  145          *********************************************************/
  146          unsigned char RF24_RxPacket(unsigned char *rxbuf)
  147          {
  148   1        unsigned char state;
  149   1        state = RF24_Read_Reg(STATUS);                         //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷µÄÖµ       
  150   1        RF24_Write_Reg(WRITE_REG+STATUS,state);               //Çå³ýRX_DSÖÐ¶Ï±êÖ¾
  151   1      
  152   1        if(state & RX_DR)                                          //½ÓÊÕµ½Êý¾Ý
  153   1        {
  154   2          RF24_Read_Buf(RD_RX_PLOAD,rxbuf,11); //TX_PLOAD_WIDTH);     //¶ÁÈ¡Êý¾Ý
  155   2          RF24_Write_Reg(FLUSH_RX,0xff);                        //Çå³ýRX FIFO¼Ä´æÆ÷
  156   2          return 0; 
  157   2        }    
  158   1        return 1;                                                   //Ã»ÊÕµ½ÈÎºÎÊý¾Ý
  159   1      }
  160          
  161          
  162          /********************************************************
  163          º¯Êý¹¦ÄÜ£º·¢ËÍÒ»¸öÊý¾Ý°ü                      
  164          Èë¿Ú²ÎÊý£ºtxbuf:Òª·¢ËÍµÄÊý¾Ý
  165          ·µ»Ø  Öµ£º0x10:´ïµ½×î´óÖØ·¢´ÎÊý£¬·¢ËÍÊ§°Ü 
  166                    0x20:·¢ËÍ³É¹¦            
  167                    0xff:·¢ËÍÊ§°Ü                  
  168          *********************************************************/
  169          unsigned char RF24_TxPacket(unsigned char *txbuf)
  170          {
  171   1        unsigned char state;
  172   1        CE_LOW();//CE=0;                                                      //CEÀ­µÍ£¬Ê¹ÄÜRF24ÅäÖÃ
  173   1        RF24_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH);     //Ð´Êý¾Ýµ½TX FIFO,32¸ö×Ö½Ú
  174   1        CE_HIGH();  //CE=1;                                                     //CEÖÃ¸ß£¬Ê¹ÄÜ·¢ËÍ     
  175   1        
  176   1        while(RF24_IRQ == 1);                                         //µÈ´ý·¢ËÍÍê³É
  177   1        state = RF24_Read_Reg(STATUS);                          //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷µÄÖµ     
  178   1        RF24_Write_Reg(WRITE_REG+STATUS, state);                //Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
  179   1        if(state&MAX_RT)                                          //´ïµ½×î´óÖØ·¢´ÎÊý
  180   1        {
  181   2          RF24_Write_Reg(FLUSH_TX,0xff);                        //Çå³ýTX FIFO¼Ä´æÆ÷ 
  182   2          return MAX_RT; 
  183   2        }
  184   1        if(state&TX_DS)                                           //·¢ËÍÍê³É
  185   1        {
  186   2          return TX_DS;
  187   2        }
C251 COMPILER V5.60.0,  rf24                                                               20/06/23  09:31:15  PAGE 4   

  188   1        return 0XFF;                                              //·¢ËÍÊ§°Ü
  189   1      }
  190          
  191          void RF24_Set_Power(unsigned char p)
  192          {
  193   1        unsigned char temp;
  194   1        CE_LOW();
  195   1        temp = RF24_Read_Reg(RF_SETUP);
  196   1        temp &= ~0x07;
  197   1        temp |= p;
  198   1        RF24_Write_Reg(WRITE_REG+RF_SETUP,temp);
  199   1        CE_HIGH();
  200   1      }
  201          
  202          void RF24_Set_Channel(unsigned char ch)
  203          {
  204   1        CE_LOW();
  205   1        RF24_Write_Reg(WRITE_REG + RF_CH,ch);
  206   1        CE_HIGH();
  207   1      }
  208          
  209          void RF24_Set_Rate(unsigned char rate)
  210          {
  211   1        unsigned char temp;
  212   1        CE_LOW();
  213   1        temp = RF24_Read_Reg(RF_SETUP);
  214   1        temp &= 0xd7; //0b1101 0111
  215   1        temp |= (rate&0x01)<<3;
  216   1        temp |= (rate&0x02)<<4;
  217   1        RF24_Write_Reg(WRITE_REG+RF_SETUP,temp);
  218   1        CE_HIGH();
  219   1      }
  220          
  221          void RF24_Set_P0_Size(unsigned char len)
  222          {
  223   1        CE_LOW();
  224   1        RF24_Write_Reg(WRITE_REG + RX_PW_P0,len);
  225   1        CE_HIGH();
  226   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       427     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         5          7
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         9     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
